package entities.value;

import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;

import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;

import org.apache.commons.lang.StringUtils;
import org.hibernate.annotations.CollectionOfElements;
import org.hibernate.annotations.IndexColumn;

@Entity
@DiscriminatorValue("INTEGERSET")
public class IntegerValueSet extends Value {

	private static final long serialVersionUID = 1L;

	@CollectionOfElements
	@JoinTable(
			name="INTEGERSET_VALUES",
			joinColumns = {
					@JoinColumn(name="ATTRIBUTE_ID"),
					@JoinColumn(name="TRIALDATA_ID")
					}
			)
	@IndexColumn(name="integersetindex")	// wird ben√∂tigt um die reihenfolge beizubehalten!
	private java.util.List<Integer> values;
	
	public java.util.List<Integer> getValues() {
		if(values == null)
			values = new LinkedList<Integer>();
		return values;
	}


	public void setValues(java.util.List<Integer> values) {
		this.values = values;
	}


	@Override
	public Serializable getValueAsObject() {
		if (values instanceof LinkedList) {
			return (LinkedList<Integer>) values;	
		} else {
			// should not happen - 
			return new LinkedList<Integer>(values);
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public void setValueObject(Serializable o) {
		if (o instanceof String) {
			String listString = (String) o;
			this.values = parseIntegerList(listString);
			return;
		}
		// TODO: do we need another type check here? - e.g. maybe we'll receive an array
		this.values = (LinkedList<Integer>)o;
	}
	
	// TODO: maybe not the ideal place for this...
	/**
	 * This method parses the String representation generated by List<Integer>().toString()
	 * e.g. [0] or [0, 1, 2, 3, 4]
	 * 
	 * @throws IllegalArgumentException if it receives another format
	 */
	private static List<Integer> parseIntegerList(String listString) {
		String pattern = "\\[([0-9], )*[0-9]?\\]";		//List<Integer>().toString()
		
		if(!Pattern.matches(pattern, listString))
			throw new IllegalArgumentException("not a valid Stringrepresentation of an Integerlist");
		
		String[] integers = listString.replaceAll("\\[", "").replaceAll("\\]", "").split(",");
		List<Integer> result = new LinkedList<Integer>();
		for(String s : integers) {
			if(!StringUtils.isBlank(s))
				result.add(Integer.parseInt(s.trim()));
		}
		
		return result;
	}

}
